{"version":3,"sources":["header.js","details.js","App.js","serviceWorker.js","index.js"],"names":["header","className","details","App","props","onCheck","id","map","element","completed","document","getElementById","style","textDecoration","console","log","state","items","showMore","temp","slice","startIndex","counter","push","setState","prevState","buttonStyle","backgroundColor","color","minWidth","width","height","padding","fontWeight","borderRadius","border","outline","detailStyle","borderBottom","cursor","itemRenderer","bind","handleRLDDChange","this","item","key","type","onChange","reorderedItems","onClick","disabled","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f72ed94.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction header() {\n\treturn (\n\t\t<header className='App-header'>\n\t\t\t<h1>Todo Task</h1>\n\t\t</header>\n\t)\n}\n\nexport default header\n","let details = [\n\t{\n\t\t\"id\": 1,\n\t\t\"details\": \"This is the task 1\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 2,\n\t\t\"details\": \"This is the task 2\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 3,\n\t\t\"details\": \"This is the task 3\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 4,\n\t\t\"details\": \"This is the task 4\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 5,\n\t\t\"details\": \"This is the task 5\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 6,\n\t\t\"details\": \"This is the task 6\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 7,\n\t\t\"details\": \"This is the task 7\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 8,\n\t\t\"details\": \"This is the task 8\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 9,\n\t\t\"details\": \"This is the task 9\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 10,\n\t\t\"details\": \"This is the task 10\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 11,\n\t\t\"details\": \"This is the task 11\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 12,\n\t\t\"details\": \"This is the task 12\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 13,\n\t\t\"details\": \"This is the task 13\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 14,\n\t\t\"details\": \"This is the task 14\",\n\t\t\"completed\": false\n\t},\n\t{\n\t\t\"id\": 15,\n\t\t\"details\": \"This is the task 15\",\n\t\t\"completed\": false\n\t}\n]\n\nexport default details;","import React, { Component } from 'react';\nimport './App.css';\nimport RLDD from 'react-list-drag-and-drop/lib/RLDD';\nimport Header from './header';\nimport details from './details';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      items: [],\n      startIndex: 0,\n      counter: 5\n    };\n    //binding this context to itemRenderer and handleRLDDChange\n    this.itemRenderer = this.itemRenderer.bind(this);\n    this.handleRLDDChange = this.handleRLDDChange.bind(this);\n  }\n\n  // Slicing only 5 items to loop through to store in \"items\".\n  // Increasing counter by 5 so next time 10 objects will load.\n  componentDidMount() {\n    let items = details.slice(this.state.startIndex, this.state.counter);\n    // console.log(items);\n    this.setState(prevState => ({ items, startIndex: prevState.counter, counter: prevState.counter + 5 }));\n  }\n\n  onCheck = id => {\n    details.map(element => {\n      if (element.id === id) {\n        element.completed = !element.completed;\n        document.getElementById(id).style.textDecoration = element.completed ? \"line-through\" : \"none\"\n      }\n    });\n    console.log(this.state.items);\n  };\n\n  showMore = () => { \n    let temp = this.state.items;\n    let items = details.slice(this.state.startIndex, this.state.counter);\n    temp.push(...items);\n    this.setState(prevState => ({ items: temp, startIndex: prevState.counter, counter: prevState.counter + 5 }));\n  };\n\n  itemRenderer(item) {\n    return (\n      <div key={item.id} id={item.id} style={this.detailStyle}>\n        <input\n          type=\"checkbox\"\n          onChange={this.onCheck.bind(this, item.id)}\n        >\n        </input>\n        {/* below openeing and closing tag for leaving space */}\n        {\" \"}\n        <span>{item.details}</span>\n      </div>\n    );\n  }\n\n  // From docs\n  handleRLDDChange(reorderedItems) {\n    this.setState({ items: reorderedItems });\n  }\n\n  // button css\n  buttonStyle = {\n    backgroundColor: \"#f8de00\",\n    color: \"white\",\n    minWidth: \"100px\",\n    width: \"auto\",\n    height: \"30px\",\n    padding: \"6px\",\n    fontWeight: \"bold\",\n    borderRadius: \"10%\",\n    border: \"none\",\n    outline: \"none\"\n  };\n\n  // details css\n  detailStyle = {\n    backgroundColor: \"f4f4f4\",\n    padding: \"10px\",\n    borderBottom: \"1px #ccc dotted\",\n    cursor: \"grab\"\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        {/* third party library for making my list draggable and droppable */}\n        {/* https://www.npmjs.com/package/react-list-drag-and-drop */}\n        <RLDD\n          items={this.state.items}\n          itemRenderer={this.itemRenderer} // from docs\n          onChange={this.handleRLDDChange} // from docs\n        />\n        {/* button to load more */}\n        <button\n          style={this.buttonStyle}\n          onClick={this.showMore}\n          disabled={this.state.items.length >= details.length ? true : false}\n        >\n          {this.state.items.length >= details.length ? \"End of List\" : \"Load More\"}\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}